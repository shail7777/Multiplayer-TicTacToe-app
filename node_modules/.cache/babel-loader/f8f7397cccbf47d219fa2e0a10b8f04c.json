{"ast":null,"code":"var _jsxFileName = \"/home/ec2-user/environment/react-starter/src/Board.js\",\n    _s = $RefreshSig$();\n\nimport './Board.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Squares } from './square.js';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io();\nexport function Board(props) {\n  _s();\n\n  const [board, setBoard] = useState([Array(9).fill(\" \")]);\n  const [sateO, setStateO] = useState(1);\n\n  function onClickButton(i) {\n    if (board.length == 9) {\n      return;\n    }\n\n    const newboard = [...board];\n\n    if (sateO == 0) {\n      newboard[i] = 'O';\n      setStateO(sateO + 1);\n      setBoard(newboard);\n      console.log(newboard);\n    } else {\n      newboard[i] = 'X'; //const newboard = [...board]\n\n      setStateO(0);\n      setBoard(newboard);\n      console.log(newboard);\n    } //socket.emit('clicked', { tile : i, value : newboard[i] });\n\n\n    socket.emit('clicked', {\n      tile: i\n    });\n  }\n\n  ;\n  useEffect(() => {\n    // Listening for a chat event emitted by the server. If received, we\n    // run the code in the function that is passed in as the second arg\n    socket.on('clicked', data => {\n      const newboard = [...board];\n      console.log('Board is updating ');\n      console.log(data.tile); //console.log(data.tile + \" : \" + data.value);\n      // If the server sends a message (on behalf of another client), then we\n      // add it to the list of messages to render it on the UI.\n      //setBoard(board[data.tile] = data.value);\n\n      setBoard(newboard[data] = \"X\"); //prevMessages => [...prevMessages, data.message])\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Squares, {\n      onClickButton: onClickButton,\n      val: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"Teb7emONrNhwiXUNQpo2NmwJalg=\");\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/ec2-user/environment/react-starter/src/Board.js"],"names":["React","useState","useEffect","Squares","io","socket","Board","props","board","setBoard","Array","fill","sateO","setStateO","onClickButton","i","length","newboard","console","log","emit","tile","on","data"],"mappings":";;;AAAA,OAAO,aAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,MAAM,GAAGD,EAAE,EAAjB;AAEA,OAAO,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AAE3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,GAAd,CAAD,CAAD,CAAlC;AACA,QAAM,CAACC,KAAD,EAAQC,SAAR,IAAqBZ,QAAQ,CAAC,CAAD,CAAnC;;AAEA,WAASa,aAAT,CAAuBC,CAAvB,EAA0B;AACxB,QAAGP,KAAK,CAACQ,MAAN,IAAgB,CAAnB,EAAqB;AACnB;AACD;;AACD,UAAMC,QAAQ,GAAG,CAAC,GAAGT,KAAJ,CAAjB;;AACA,QAAGI,KAAK,IAAI,CAAZ,EAAc;AACZK,MAAAA,QAAQ,CAACF,CAAD,CAAR,GAAc,GAAd;AACAF,MAAAA,SAAS,CAACD,KAAK,GAAC,CAAP,CAAT;AACAH,MAAAA,QAAQ,CAACQ,QAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,KALD,MAMI;AACFA,MAAAA,QAAQ,CAACF,CAAD,CAAR,GAAc,GAAd,CADE,CAEF;;AACAF,MAAAA,SAAS,CAAC,CAAD,CAAT;AACAJ,MAAAA,QAAQ,CAACQ,QAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,KAjBuB,CAmBxB;;;AACAZ,IAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ,EAAuB;AAAEC,MAAAA,IAAI,EAAGN;AAAT,KAAvB;AACD;;AAAA;AAEDb,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAG,IAAAA,MAAM,CAACiB,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7B,YAAMN,QAAQ,GAAG,CAAC,GAAGT,KAAJ,CAAjB;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAI,CAACF,IAAjB,EAH6B,CAI7B;AACA;AACA;AACA;;AACAZ,MAAAA,QAAQ,CAACQ,QAAQ,CAACM,IAAD,CAAR,GAAiB,GAAlB,CAAR,CAR6B,CAS7B;AACD,KAVD;AAWD,GAdQ,EAcN,EAdM,CAAT;AAgBA,sBACE;AAAA,2BACE,QAAC,OAAD;AAAS,MAAA,aAAa,EAAET,aAAxB;AAAuC,MAAA,GAAG,EAAEN;AAA5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjDeF,K;;KAAAA,K","sourcesContent":["import './Board.css';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Squares } from './square.js';\nimport io from 'socket.io-client';\n\nconst socket = io();\n\nexport function Board(props) {\n  \n  const [board, setBoard] = useState([Array(9).fill(\" \")]);\n  const [sateO, setStateO] = useState(1);\n\n  function onClickButton(i) {\n    if(board.length == 9){\n      return;\n    }\n    const newboard = [...board]\n    if(sateO == 0){\n      newboard[i] = 'O';\n      setStateO(sateO+1);\n      setBoard(newboard)\n      console.log(newboard);\n    }\n    else{\n      newboard[i] = 'X';\n      //const newboard = [...board]\n      setStateO(0);\n      setBoard(newboard)\n      console.log(newboard);\n    }\n    \n    //socket.emit('clicked', { tile : i, value : newboard[i] });\n    socket.emit('clicked', { tile : i});\n  };\n  \n  useEffect(() => {\n    // Listening for a chat event emitted by the server. If received, we\n    // run the code in the function that is passed in as the second arg\n    socket.on('clicked', (data) => {\n      const newboard = [...board]\n      console.log('Board is updating ');\n      console.log(data.tile);\n      //console.log(data.tile + \" : \" + data.value);\n      // If the server sends a message (on behalf of another client), then we\n      // add it to the list of messages to render it on the UI.\n      //setBoard(board[data.tile] = data.value);\n      setBoard(newboard[data] = \"X\");\n      //prevMessages => [...prevMessages, data.message])\n    });\n  }, []);\n  \n  return (\n    <div>\n      <Squares onClickButton={onClickButton} val={board} />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}